Index: ClassFiles/RobotController.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\n\nimport rospy\nimport threading\nimport subprocess\nimport code\nfrom ProjectPath import PROJECT_PATH\nfrom dsr_msgs.srv import MoveLine, MoveJoint, MoveHome, MoveWait, Fkin, Ikin\nfrom dsr_msgs.srv import GetCurrentPose, SetCurrentTcp, ConfigCreateTcp, GetCurrentTcp, ConfigDeleteTcp\nfrom dsr_msgs.srv import SetRobotMode\n\n\nclass RobotController:\n    def __init__(self):\n        self.Running = False\n        self.lock = threading.Lock()\n        self.SamplingTime = 100/1000\n        self.launcher_model = \"a0509_custom\"\n        self.TCP_Offset = [0,5,0,0,0,0]\n\n        self.Function_MoveWait = None\n        self.Function_MoveHome = None\n        self.Function_MoveLine = None\n        self.Function_MoveJoint = None\n        self.Function_GetPose = None\n\n        self.EE_Position = None\n        self.EE_Rotation = None\n\n        self.Velocity = [50, 20]\n        self.Acceleration = [30, 20]\n        self.InitJoint = [11.859779357910156, -0.6888203024864197, 99.6191177368164, -1.7431619358347097e-15, 81.0697021484375, 11.859779357910159]\n        self.InitPose = [350/1000, 73.5/1000, 383.5/1000, 0]\n\n\n    def Ready(self):\n        # Model Name\n        modelName = self.launcher_model\n\n        # Preprocessing\n        rospy.init_node('Sejun_RobotController', anonymous=True)\n        rospy.wait_for_service('/dsr01' + modelName + '/motion/move_home')\n        rospy.wait_for_service('/dsr01' + modelName + '/motion/move_joint')\n\n        # Functions\n        self.Function_MoveHome = rospy.ServiceProxy('/dsr01' + modelName + '/motion/move_home', MoveHome)\n        self.Function_MoveWait = rospy.ServiceProxy('/dsr01' + modelName + '/motion/move_wait', MoveWait)\n        self.Function_MoveLine = rospy.ServiceProxy('/dsr01' + modelName + '/motion/move_line', MoveLine)\n        self.Function_MoveJoint = rospy.ServiceProxy('/dsr01' + modelName + '/motion/move_joint', MoveJoint)\n        self.Function_GetPose = rospy.ServiceProxy('/dsr01' + modelName + '/system/get_current_pose', GetCurrentPose)\n        self.Function_CreateTCP = rospy.ServiceProxy('/dsr01' + modelName + '/tcp/config_create_tcp', ConfigCreateTcp)\n        self.Function_SetTCP = rospy.ServiceProxy('/dsr01' + modelName + '/tcp/set_current_tcp', SetCurrentTcp)\n        self.Function_GetTCP = rospy.ServiceProxy('/dsr01' + modelName + '/tcp/get_current_tcp', GetCurrentTcp)\n        self.Function_DeletTCP = rospy.ServiceProxy('/dsr01' + modelName + '/tcp/config_delete_tcp', ConfigDeleteTcp)\n        self.Function_SetRobotMode = rospy.ServiceProxy('/dsr01' + modelName + '/system/set_robot_mode', SetRobotMode)\n\n        self.Running = True\n        print(\"Ready!\")\n        print(\"\")\n\n\n    def Move_Home(self):\n\n        results = self.Function_MoveHome()\n        if results.success == True:\n            print(\"Homing...\")\n            self.Function_MoveWait()\n            print(\"Done!\")\n            print(\"\")\n        else:\n            print(\"Failed...\")\n            print(\"\")\n\n\n\n    def Move_Abs(self, X, Y, Z, Phi):\n        pose = [X, Y, Z, 0, 180, Phi]\n        vel = self.Velocity\n        acc = self.Acceleration\n        time = 0\n        radius = 0\n        ref = 0\n        mode = 0\n        blendType = 0\n        syncType = 0\n\n        if self.Running:\n            print(\"Moving...\")\n            results = self.Function_MoveLine(pose, vel, acc, time, radius, ref, mode, blendType, syncType)\n            if results.success == True:\n\n                self.Function_MoveWait()\n                print(\"Done!\")\n                print(\"\")\n            else:\n                print(\"Failed...\")\n                print(\"\")\n\n\n\n    def Move_Rel(self, X, Y, Z, Phi):\n        pose = [X, Y, Z, 0, 0, Phi]\n        vel = self.Velocity\n        acc = self.Acceleration\n        time = 0\n        radius = 0\n        ref = 0\n        mode = 1\n        blendType = 0\n        syncType = 0\n\n        if self.Running:\n            print(\"Moving...\")\n            results = self.Function_MoveLine(pose, vel, acc, time, radius, ref, mode, blendType, syncType)\n            if results.success == True:\n\n                self.Function_MoveWait()\n                print(\"Done!\")\n                print(\"\")\n            else:\n                print(\"Failed...\")\n                print(\"\")\n\n\n\n    def Move_Joint(self, q):\n        vel = 20\n        acc = 20\n        time = 0\n        radius = 0\n        mode = 0\n        blendType = 0\n        syncType = 0\n\n        if self.Running:\n            print(\"Moving...\")\n            results = self.Function_MoveJoint(q, vel, acc, time, radius, mode, blendType, syncType)\n            if results.success == True:\n\n                self.Function_MoveWait()\n                print(\"Done!\")\n                print(\"\")\n            else:\n                print(\"Failed...\")\n                print(\"\")\n\n\n\n    def Init_Pose(self):\n        if self.Running:\n            self.Move_Joint(self.InitJoint)\n\n\n\n    def Get_Joint(self):\n        with self.lock:\n            Pose = self.Function_GetPose(0)\n        print(\"\")\n        return Pose.pos\n\n\n\n    def Get_Pose(self):\n        with self.lock:\n            Pose = self.Function_GetPose(1)\n        print(\"\")\n        return Pose.pos\n\n    def Wait(self, Time_sec):\n        print(\"Sleeping...\")\n        rospy.sleep(Time_sec)\n        print(\"Waked up!\")\n        print(\"\")\n\n    def Track_EE(self):\n        print(\"Tracking...\")\n        while self.Running:\n            Pose = self.Function_GetPose(1)\n            with self.lock:\n                self.EE_Position = Pose.pos[:3]\n                self.EE_Rotation = Pose.pos[3:]\n\n        print(\"Done!\")\n        print(\"\")\n\n\n    # Manual Mode에서 가능\n    def SetTCP(self, TCPName = \"SJ_TCP\", TCP_OFFSET = None):\n        if TCP_OFFSET == None:\n            TCP_OFFSET = self.TCP_Offset\n\n        Result1 = self.Function_CreateTCP(TCPName, TCP_OFFSET)\n        Result2 = self.Function_SetTCP(TCPName)\n        Result3 = self.Function_GetTCP()\n\n        if Result1.success == True and Result2.success == True:\n            print(\"TCP Setting Done!\")\n            print(\"Current TCP Name: \" + Result3.info)\n            print(f\"Current TCP Pose: {TCP_OFFSET}\")\n            print(\"\")\n        else:\n            print(\"TCP Setting Failed.. Check Robot Mode\")\n            print(\"\")\n\n\n\n    def DeletTCP(self):\n        DeletTCP = rospy.ServiceProxy('/dsr01' + self.launcher_model + '/tcp/config_delete_tcp', ConfigDeleteTcp)\n        Result = DeletTCP(name=\"SJ_TCP\")\n        if Result.success == True:\n            print(\"TCP Deleting Done!\")\n            print(\"\")\n        else:\n            print(\"TCP Setting Failed.. Check Robot Mode\")\n            print(\"\")\n\n\n    def SetRobotMode(self, ManualMode = False):\n        if ManualMode == True:\n            Result = self.Function_SetRobotMode(1)\n        else:\n            Result = self.Function_SetRobotMode(0)\n\n        if Result.success == True:\n            if ManualMode == False:\n                print(\"Auto Mode On!\")\n                print(\"\")\n            else:\n                print(\"Manual Mode On!\")\n                print(\"\")\n\n\n\n    def GetTCP(self):\n\n        Result = self.Function_GetTCP()\n\n        if Result.success == True:\n            print(\"TCP Name: \" + Result.info)\n            print(\"\")\n        else:\n            print(\"TCP Setting Failed.. \")\n            print(\"\")\n\n\n\n\n    def DeletTCP(self, TCPName = None):\n\n        if TCPName == None:\n            TCPName = self.Function_GetTCP()\n\n        Result = self.Function_DeletTCP(TCPName.info)\n        if Result.success == True:\n            print(\"TCP Named \" + TCPName.info + \" Deleted!\")\n            print(\"\")\n        else:\n            print(\"TCP Setting Failed.. Check Robot Mode\")\n            print(\"\")\n\n\n\n\n    def Controller(self):\n        banner = \"\\n Waiting Your Order...\"\n        locals_dict = {\"RC\": self,\n                       'MoveJoint': self.Move_Joint,\n                       'MoveRel': self.Move_Rel,\n                       'MoveAbs': self.Move_Abs,\n                       'GetPose': self.Get_Pose,\n                       'GetJoint': self.Get_Joint,\n                       'HomePose': self.Move_Home,\n                       'InitPose': self.Init_Pose,\n                       'SetTcp': self.SetTCP,\n                       \"GetTcp\": self.GetTCP,\n                       \"DeletTcp\": self.DeletTCP,\n                       \"SetRobotMode\": self.SetRobotMode,\n                       'Wait': self.Wait}\n\n        code.interact(banner=banner, local=locals_dict)\n\n        self.EndController()\n\n\n    def EndController(self):\n        self.Running = False\n\n\nif __name__ == \"__main__\":\n    RC = RobotController()\n    RC.Ready()\n\n    # EE_Tracker = threading.Thread(target=RC.Track_EE, daemon=True)\n    # EE_Tracker.start()\n\n    # RC.Move_Home()\n\n    banner = \"\\n Waiting Your Order...\"\n    locals_dict = {\"RC\":RC,\n                   'MoveJoint':RC.Move_Joint,\n                   'MoveRel':RC.Move_Rel,\n                   'MoveAbs':RC.Move_Abs,\n                   'GetPose':RC.Get_Pose,\n                   'GetJoint':RC.Get_Joint,\n                   'HomePose':RC.Move_Home,\n                   'InitPose':RC.Init_Pose,\n                   'SetTcp':RC.SetTCP,\n                   \"GetTcp\": RC.GetTCP,\n                   \"DeletTcp\": RC.DeletTCP,\n                   \"SetRobotMode\": RC.SetRobotMode,\n                   'Wait': RC.Wait}\n\n    code.interact(banner=banner, local=locals_dict)\n\n    RC.EndController()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ClassFiles/RobotController.py b/ClassFiles/RobotController.py
--- a/ClassFiles/RobotController.py	(revision 7889996a66c9d63513039d1a73b4fc3712bc9c58)
+++ b/ClassFiles/RobotController.py	(date 1753963613497)
@@ -75,7 +75,10 @@
 
     def Move_Abs(self, X, Y, Z, Phi):
         pose = [X, Y, Z, 0, 180, Phi]
-        vel = self.Velocity
+        if Z == 0:
+            vel = [self.Vel_X, self.Vel_Phi]
+        else:
+            vel = [self.Vel_Z, self.Vel_Phi]
         acc = self.Acceleration
         time = 0
         radius = 0
@@ -100,7 +103,10 @@
 
     def Move_Rel(self, X, Y, Z, Phi):
         pose = [X, Y, Z, 0, 0, Phi]
-        vel = self.Velocity
+        if Z == 0:
+            vel = [self.Vel_X, self.Vel_Phi]
+        else:
+            vel = [self.Vel_Z, self.Vel_Phi]
         acc = self.Acceleration
         time = 0
         radius = 0
