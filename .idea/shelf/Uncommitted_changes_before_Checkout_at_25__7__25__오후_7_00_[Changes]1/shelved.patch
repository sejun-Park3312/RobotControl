Index: RobotController.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\n\n## <<Before Starting, Open Gazebo>>\n## <<Copy and Paste the Following Commands into Terminal!!>>\n## ---------------------------------------------\n\n# cd ~/catkin_ws\n# source devel/setup.bash\n# roslaunch dsr_launcher single_robot_gazebo.launch model:=a0509 sim:=true\n# roslaunch dsr_launcher SJ_Custom.launch model:=a0509_Calibration sim:=true\n# roslaunch dsr_launcher SJ_Custom.launch model:=a0509_Calibration mode:=real host:=192.168.0.181 port:=12345\n## ---------------------------------------------\n\n## <<Connection LAN>>\n# sudo ip addr add 192.168.0.100/24 dev enx00e04f82fbd0\n# sudo ip link set enx00e04f82fbd0 up\n# ping 192.168.0.181\n## ---------------------------------------------\n\n## <<Console Control>>\n## <<Copy and Paste the Following Commands into \"New\" Terminal!!>>\n## ---------------------------------------------\n# python3 RobotController.py\n## ---------------------------------------------\n\nimport rospy\nimport threading\nimport code\nfrom dsr_msgs.srv import MoveLine, MoveJoint, MoveHome, MoveWait, Fkin, Ikin\nfrom dsr_msgs.srv import GetCurrentPose, SetCurrentTcp, ConfigCreateTcp, GetCurrentTcp, ConfigDeleteTcp\n\n\nclass RobotController:\n    def __init__(self):\n        self.Running = False\n        self.lock = threading.Lock()\n        self.SamplingTime = 100/1000\n        self.modelName = \"a0509_Calibration\"\n        self.TCP_Offset = [0,-34.5,-397.5,0,0,0]\n\n        self.Function_MoveWait = None\n        self.Function_MoveHome = None\n        self.Function_MoveLine = None\n        self.Function_MoveJoint = None\n        self.Function_GetPose = None\n\n        self.EE_Position = None\n        self.EE_Rotation = None\n\n        self.Velocity = [50, 20]\n        self.Acceleration = [30, 20]\n        self.InitJoint = [11.9, 4.15, 112.47, 0, 63.38, 11.9]\n        self.InitPose = [210.5/1000, 42/1000, 358.0/1000]\n\n\n    def Ready(self):\n\n        # Model Name\n        modelName = self.modelName\n\n        # Preprocessing\n        rospy.init_node('Sejun_RobotController', anonymous=True)\n        rospy.wait_for_service('/dsr01' + modelName + '/motion/move_home')\n        rospy.wait_for_service('/dsr01' + modelName + '/motion/move_joint')\n\n        # Functions\n        self.Function_MoveHome = rospy.ServiceProxy('/dsr01' + modelName + '/motion/move_home', MoveHome)\n        self.Function_MoveWait = rospy.ServiceProxy('/dsr01' + modelName + '/motion/move_wait', MoveWait)\n        self.Function_MoveLine = rospy.ServiceProxy('/dsr01' + modelName + '/motion/move_line', MoveLine)\n        self.Function_MoveJoint = rospy.ServiceProxy('/dsr01' + modelName + '/motion/move_joint', MoveJoint)\n        self.Function_GetPose = rospy.ServiceProxy('/dsr01' + modelName + '/system/get_current_pose', GetCurrentPose)\n\n        self.Running = True\n        print(\"Ready!\")\n        print(\"\")\n\n\n\n    def Move_Home(self):\n\n        results = self.Function_MoveHome()\n        if results.success == True:\n            print(\"Homing...\")\n            self.Function_MoveWait()\n            print(\"Done!\")\n            print(\"\")\n        else:\n            print(\"Failed...\")\n            print(\"\")\n\n\n\n    def Move_Abs(self, X, Y, Z, Phi):\n        pose = [X, Y, Z, 180, 2.7183186830370687e-06, 180 + Phi]\n        vel = self.Velocity\n        acc = self.Acceleration\n        time = 0\n        radius = 0\n        ref = 0\n        mode = 0\n        blendType = 0\n        syncType = 0\n\n        if self.Running:\n            print(\"Moving...\")\n            results = self.Function_MoveLine(pose, vel, acc, time, radius, ref, mode, blendType, syncType)\n            if results.success == True:\n\n                self.Function_MoveWait()\n                print(\"Done!\")\n                print(\"\")\n            else:\n                print(\"Failed...\")\n                print(\"\")\n\n\n\n    def Move_Rel(self, X, Y, Z, Phi):\n        pose = [X, Y, Z, 0, 0, Phi]\n        vel = self.Velocity\n        acc = self.Acceleration\n        time = 0\n        radius = 0\n        ref = 0\n        mode = 1\n        blendType = 0\n        syncType = 0\n\n        if self.Running:\n            print(\"Moving...\")\n            results = self.Function_MoveLine(pose, vel, acc, time, radius, ref, mode, blendType, syncType)\n            if results.success == True:\n\n                self.Function_MoveWait()\n                print(\"Done!\")\n                print(\"\")\n            else:\n                print(\"Failed...\")\n                print(\"\")\n\n\n\n    def Move_Joint(self, q):\n        vel = 20\n        acc = 20\n        time = 0\n        radius = 0\n        mode = 0\n        blendType = 0\n        syncType = 0\n\n        if self.Running:\n            print(\"Moving...\")\n            results = self.Function_MoveJoint(q, vel, acc, time, radius, mode, blendType, syncType)\n            if results.success == True:\n\n                self.Function_MoveWait()\n                print(\"Done!\")\n                print(\"\")\n            else:\n                print(\"Failed...\")\n                print(\"\")\n\n\n\n    def Init_Pose(self):\n        if self.Running:\n            self.Move_Joint(self.InitJoint)\n\n\n\n    def Get_Joint(self):\n        with self.lock:\n            Pose = self.Function_GetPose(0)\n        print(\"\")\n        return Pose.pos\n\n\n\n    def Get_Pose(self):\n        with self.lock:\n            Pose = self.Function_GetPose(1)\n        print(\"\")\n        return Pose.pos\n\n\n\n    def Track_EE(self):\n        print(\"Tracking...\")\n        while self.Running:\n            Pose = self.Function_GetPose(1)\n            with self.lock:\n                self.EE_Position = Pose.pos[:3]\n                self.EE_Rotation = Pose.pos[3:]\n            print(f\"Pose: {self.EE_Position}\")\n            rospy.sleep(1)\n        print(\"Done!\")\n        print(\"\")\n\n\n\n    def SetTCP(self):\n        CreatTCP = rospy.ServiceProxy('/dsr01' + self.modelName + '/tcp/config_create_tcp', ConfigCreateTcp)\n        Result1 = CreatTCP(name=\"SJ_TCP\", pos=self.TCP_Offset)\n        SetTCP = rospy.ServiceProxy('/dsr01' + self.modelName + '/tcp/set_current_tcp', SetCurrentTcp)\n        Result2 = SetTCP(name=\"SJ_TCP\")\n        GetTCP = rospy.ServiceProxy('/dsr01' + self.modelName + '/tcp/get_current_tcp', GetCurrentTcp)\n        Result3 = GetTCP()\n        if Result1.success == True and Result2.success == True:\n            print(\"TCP Setting Done!\")\n            print(\"Current TCP Name:\" + Result3.info)\n            print(\"\")\n        else:\n            print(\"TCP Setting Failed!\")\n            print(\"\")\n\n\n\n    def DeletTCP(self):\n        DeletTCP = rospy.ServiceProxy('/dsr01' + self.modelName + '/tcp/config_delete_tcp', ConfigDeleteTcp)\n        Result = DeletTCP(name=\"SJ_TCP\")\n        if Result.success == True:\n            print(\"TCP Deleting Done!\")\n            print(\"\")\n        else:\n            print(\"TCP Deleting Failed!\")\n            print(\"\")\n\n\n    def Fkin(self, q):\n        Function_Fkin = rospy.ServiceProxy('/dsr01' + self.modelName + '/motion/fkin', Fkin)\n        Result = Function_Fkin(pos=q, ref=2)\n        Pose = Result.conv_posx\n        return Pose\n\n\n    def EndController(self):\n        self.Running = False\n\n\n\nif __name__ == \"__main__\":\n    RC = RobotController()\n    RC.Ready()\n\n    # EE_Tracker = threading.Thread(target=RC.Track_EE, daemon=True)\n    # EE_Tracker.start()\n\n    # RC.Move_Home()\n\n    banner = \"\\n Waiting Your Order...\"\n    locals_dict = {\"RC\":RC,\n                   'MoveJoint':RC.Move_Joint,\n                   'MoveRel':RC.Move_Rel,\n                   'MoveAbs':RC.Move_Abs,\n                   'GetPose':RC.Get_Pose,\n                   'GetJoint':RC.Get_Joint,\n                   'HomePose':RC.Move_Home,\n                   'InitPose':RC.Init_Pose,\n                   'SetTcp':RC.SetTCP,\n                   }\n\n    code.interact(banner=banner, local=locals_dict)\n\n    RC.EndController()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RobotController.py b/RobotController.py
--- a/RobotController.py	(revision 30e75d3232e3463f8f3b4c1e6e66e50ba82159f8)
+++ b/RobotController.py	(date 1753437541095)
@@ -3,7 +3,6 @@
 ## <<Before Starting, Open Gazebo>>
 ## <<Copy and Paste the Following Commands into Terminal!!>>
 ## ---------------------------------------------
-
 # cd ~/catkin_ws
 # source devel/setup.bash
 # roslaunch dsr_launcher single_robot_gazebo.launch model:=a0509 sim:=true
@@ -11,11 +10,6 @@
 # roslaunch dsr_launcher SJ_Custom.launch model:=a0509_Calibration mode:=real host:=192.168.0.181 port:=12345
 ## ---------------------------------------------
 
-## <<Connection LAN>>
-# sudo ip addr add 192.168.0.100/24 dev enx00e04f82fbd0
-# sudo ip link set enx00e04f82fbd0 up
-# ping 192.168.0.181
-## ---------------------------------------------
 
 ## <<Console Control>>
 ## <<Copy and Paste the Following Commands into "New" Terminal!!>>
